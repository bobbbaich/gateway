AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a service on AWS Fargate, hosted in a private subnet, but accessible via a public load balancer.

Parameters:
  EnvironmentName:
    Type: String
  ServiceName:
    Type: String
    Default: gateway
  ImageUrl:
    Type: String
  ServicePort:
    Type: Number
    Default: 80
  TaskCpu:
    Type: Number
    Default: 512
  TaskMemory:
    Type: Number
    Default: 2048
  XRayCPU:
    Type: Number
    Default: 32
  XRayMemory:
    Type: Number
    Default: 256
  EnvoyCPU:
    Type: Number
    Default: 32
  EnvoyMemory:
    Type: Number
    Default: 256
  ServiceCPU:
    Type: Number
    Default: 448
  ServiceMemory:
    Type: Number
    Default: 1536
  Priority:
    Type: Number
    Default: 10
  DesiredCount:
    Type: Number
    Default: 2

Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${EnvironmentName}-service-${ServiceName}

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref ServiceName
      Cpu: !Ref TaskCpu
      Memory: !Ref TaskMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !ImportValue
        'Fn::Sub': '${EnvironmentName}:ECSTaskExecutionRole'
      TaskRoleArn: !ImportValue
        'Fn::Sub': '${EnvironmentName}:ECSTaskRole'
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: !Ref ImageUrl
          Cpu: !Ref ServiceCPU
          Memory: !Ref ServiceMemory
          PortMappings:
            - ContainerPort: !Ref ServicePort
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Sub ${EnvironmentName}-service-${ServiceName}
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref ServiceName
          Environment:
            - Name: ACTIVE_ENVIRONMENT
              Value: !Ref EnvironmentName
            - Name: CONTAINER_PORT
              Value: !Ref ServicePort
            - Name: SERVICE_DISCOVERY_NAMESPACE_NAME
              Value: !ImportValue
                'Fn::Sub': '${EnvironmentName}:ServiceDiscoveryNamespaceName'

  Service:
    Type: AWS::ECS::Service
    DependsOn: HttpsLoadBalancerListenerRule
    Properties:
      ServiceName: !Ref ServiceName
      Cluster: !ImportValue
        'Fn::Sub': '${EnvironmentName}:ECSCluster'
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref DesiredCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !ImportValue
              'Fn::Sub': '${EnvironmentName}:ContainerSG'
          Subnets:
            - !ImportValue
              'Fn::Sub': '${EnvironmentName}:PrivateSubnet1'
            - !ImportValue
              'Fn::Sub': '${EnvironmentName}:PrivateSubnet2'
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: !Ref ServicePort
          TargetGroupArn: !Ref TargetGroup
      ServiceRegistries:
        - RegistryArn: !GetAtt ServiceDiscoveryService.Arn

  ServiceDiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: !Ref ServiceName
      Description: !Sub ${EnvironmentName} ${ServiceName} service
      NamespaceId: !ImportValue
        'Fn::Sub': '${EnvironmentName}:ServiceDiscoveryNamespaceId'
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: A
      HealthCheckCustomConfig:
        FailureThreshold: 1

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 45
      HealthCheckPath: /actuator/health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Ref ServiceName
      Port: !Ref ServicePort
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !ImportValue
        'Fn::Sub': '${EnvironmentName}:VpcId'

  HttpsLoadBalancerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [ '/', '/*' ]
      ListenerArn: !ImportValue
        'Fn::Sub': '${EnvironmentName}:HttpsLoadBalancerListener'
      Priority: !Ref Priority

  ECSScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 4
      MinCapacity: 2
      RoleARN: !ImportValue
        'Fn::Sub': '${EnvironmentName}:AutoscalingRole'
      ServiceNamespace: ecs
      ScalableDimension: 'ecs:service:DesiredCount'
      ResourceId: !Join
        - /
        - - service
          - !ImportValue
            'Fn::Sub': '${EnvironmentName}:ECSCluster'
          - !GetAtt Service.Name

  ServiceScalingPolicyCPU:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-target-tracking-cpu70
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        ScaleInCooldown: 180
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  ServiceScalingPolicyMem:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-target-tracking-mem90
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 90.0
        ScaleInCooldown: 180
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageMemoryUtilization